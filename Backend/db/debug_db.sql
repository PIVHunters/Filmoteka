-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public."User"
(
    user_id serial NOT NULL,
    nickname character varying(30) COLLATE pg_catalog."default" NOT NULL,
    photo character varying(30) COLLATE pg_catalog."default",
    password character varying(20) COLLATE pg_catalog."default" NOT NULL,
    email character varying(30) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "User_pkey" PRIMARY KEY (user_id),
    CONSTRAINT email_user UNIQUE (email),
    CONSTRAINT nickname_user UNIQUE (nickname)
);

CREATE TABLE IF NOT EXISTS public.abandoned_films
(
    user_id integer NOT NULL,
    film_id integer NOT NULL,
    type_id integer NOT NULL,
    CONSTRAINT abandoned_films_pkey PRIMARY KEY (user_id, film_id, type_id)
);

CREATE TABLE IF NOT EXISTS public.admin
(
    admin_id serial NOT NULL,
    nickname character varying(50) COLLATE pg_catalog."default" NOT NULL,
    email character varying(20) COLLATE pg_catalog."default" NOT NULL,
    password character varying(20) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT admin_pkey PRIMARY KEY (admin_id),
    CONSTRAINT email_admin UNIQUE (email),
    CONSTRAINT nickname_admin UNIQUE (nickname)
);

CREATE TABLE IF NOT EXISTS public.comments
(
    user_id integer NOT NULL,
    comment_id integer NOT NULL,
    film_id integer NOT NULL,
    type_id integer NOT NULL,
    message text COLLATE pg_catalog."default",
    "time" timestamp without time zone,
    CONSTRAINT comments_pkey PRIMARY KEY (user_id, comment_id, film_id, type_id)
);

CREATE TABLE IF NOT EXISTS public.film_facts
(
    film_id integer NOT NULL,
    type_id integer NOT NULL,
    genre character(1) COLLATE pg_catalog."default",
    trailer character varying(30) COLLATE pg_catalog."default",
    CONSTRAINT film_facts_pkey PRIMARY KEY (film_id, type_id)
);

CREATE TABLE IF NOT EXISTS public.film_member
(
    member_id character(18) COLLATE pg_catalog."default" NOT NULL,
    film_id integer NOT NULL,
    type_id integer NOT NULL,
    photo character varying(30) COLLATE pg_catalog."default",
    name character varying(30) COLLATE pg_catalog."default" NOT NULL,
    profession character varying(40) COLLATE pg_catalog."default" NOT NULL,
    role character varying(20) COLLATE pg_catalog."default",
    gender character(18) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT film_member_pkey PRIMARY KEY (member_id, film_id, type_id)
);

CREATE TABLE IF NOT EXISTS public.films
(
    film_id serial NOT NULL,
    type_id integer NOT NULL,
    kp_rating double precision,
    name character varying(20) COLLATE pg_catalog."default" NOT NULL,
    duration smallint,
    release_year smallint,
    budget integer,
    distributor character varying(30) COLLATE pg_catalog."default",
    user_mark smallint,
    seasons_number integer,
    imdb_rating double precision,
    imdb_votes integer,
    kp_votes integer,
    description text COLLATE pg_catalog."default",
    kp_id integer,
    poster character varying(100) COLLATE pg_catalog."default",
    short_desc character varying(100) COLLATE pg_catalog."default",
    start_series smallint,
    end_series smallint,
    CONSTRAINT films_pkey PRIMARY KEY (film_id, type_id)
);

CREATE TABLE IF NOT EXISTS public.planed_films
(
    user_id integer NOT NULL,
    film_id integer NOT NULL,
    type_id integer NOT NULL,
    CONSTRAINT planed_films_pkey PRIMARY KEY (user_id, film_id, type_id)
);

CREATE TABLE IF NOT EXISTS public.season_info
(
    film_id integer NOT NULL,
    type_id integer NOT NULL,
    name character varying(30) COLLATE pg_catalog."default",
    series_count smallint,
    number_of_season smallint,
    CONSTRAINT season_info_pkey PRIMARY KEY (film_id, type_id)
);

CREATE TABLE IF NOT EXISTS public.selection_of_films
(
    user_id integer NOT NULL,
    film_id integer NOT NULL,
    type_id integer NOT NULL,
    CONSTRAINT selection_of_films_pkey PRIMARY KEY (user_id, film_id, type_id)
);

CREATE TABLE IF NOT EXISTS public.shelved_films
(
    user_id integer NOT NULL,
    film_id integer NOT NULL,
    type_id integer NOT NULL,
    CONSTRAINT shelved_films_pkey PRIMARY KEY (user_id, film_id, type_id)
);

CREATE TABLE IF NOT EXISTS public.type
(
    type_id smallint,
    type_name character varying(20) COLLATE pg_catalog."default",
    CONSTRAINT type_pkey PRIMARY KEY (type_id)
);

CREATE TABLE IF NOT EXISTS public.user_friends
(
    user_id integer NOT NULL,
    friend_id__user_id_ integer NOT NULL,
    user_nickname character varying(30) COLLATE pg_catalog."default",
    CONSTRAINT user_friends_pkey PRIMARY KEY (user_id, friend_id__user_id_)
);

CREATE TABLE IF NOT EXISTS public.watched_films
(
    film_id integer NOT NULL,
    user_id integer NOT NULL,
    type_id integer NOT NULL,
    CONSTRAINT watched_films_pkey PRIMARY KEY (film_id, user_id, type_id)
);

ALTER TABLE IF EXISTS public.abandoned_films
    ADD CONSTRAINT abandoned_films_film_id_type_id_fkey FOREIGN KEY (film_id, type_id)
        REFERENCES public.films (film_id, type_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.abandoned_films
    ADD CONSTRAINT abandoned_films_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES public."User" (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.comments
    ADD CONSTRAINT comments_film_id_type_id_fkey FOREIGN KEY (film_id, type_id)
        REFERENCES public.films (film_id, type_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.comments
    ADD CONSTRAINT comments_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES public."User" (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.film_facts
    ADD CONSTRAINT film_facts_film_id_type_id_fkey FOREIGN KEY (film_id, type_id)
        REFERENCES public.films (film_id, type_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS film_facts_pkey
    ON public.film_facts(film_id, type_id);


ALTER TABLE IF EXISTS public.film_member
    ADD CONSTRAINT film_member_film_id_type_id_fkey FOREIGN KEY (film_id, type_id)
        REFERENCES public.films (film_id, type_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.films
    ADD CONSTRAINT films_type_id_fkey FOREIGN KEY (type_id)
        REFERENCES public.type (type_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.planed_films
    ADD CONSTRAINT planed_films_film_id_type_id_fkey FOREIGN KEY (film_id, type_id)
        REFERENCES public.films (film_id, type_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.planed_films
    ADD CONSTRAINT planed_films_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES public."User" (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.season_info
    ADD CONSTRAINT season_info_film_id_type_id_fkey FOREIGN KEY (film_id, type_id)
        REFERENCES public.films (film_id, type_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS season_info_pkey
    ON public.season_info(film_id, type_id);


ALTER TABLE IF EXISTS public.selection_of_films
    ADD CONSTRAINT selection_of_films_film_id_type_id_fkey FOREIGN KEY (film_id, type_id)
        REFERENCES public.films (film_id, type_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.selection_of_films
    ADD CONSTRAINT selection_of_films_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES public."User" (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.shelved_films
    ADD CONSTRAINT shelved_films_film_id_type_id_fkey FOREIGN KEY (film_id, type_id)
        REFERENCES public.films (film_id, type_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.shelved_films
    ADD CONSTRAINT shelved_films_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES public."User" (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.user_friends
    ADD CONSTRAINT user_friends_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES public."User" (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.user_friends
    ADD CONSTRAINT user_friends_user_id_fkey1 FOREIGN KEY (user_id)
        REFERENCES public."User" (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.watched_films
    ADD CONSTRAINT watched_films_film_id_type_id_fkey FOREIGN KEY (film_id, type_id)
        REFERENCES public.films (film_id, type_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.watched_films
    ADD CONSTRAINT watched_films_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES public."User" (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;

END;